generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildSettings {
  guildId                 BigInt   @id @unique
  guild                   Guild    @relation(fields: [guildId], references: [id])
  promptChannelId         BigInt?
  promptMessageContent    String?
  promptMessageId         BigInt?
  reviewChannelId         BigInt?
  followUpChannelId       BigInt?
  raiseChannelId          BigInt?
  logChannelId            BigInt?
  raiseRoleId             BigInt?
  reviewerRoleId          BigInt?
  followUpPingRoleIds     String[]
  addRoleId               BigInt?
  removeRoleId            BigInt?
  successMessageChannelId BigInt?
  successMessageContent   String?
}

model Guild {
  id                      BigInt                   @unique
  verificationSubmissions VerificationSubmission[]
  reviewChannelId         BigInt?
  guildSettings           GuildSettings?
}

model VerificationSubmission {
  reference              String             @id @unique
  userId                 BigInt
  data                   Json
  creationTimestamp      DateTime
  closureTimestamp       DateTime?
  status                 VerificationStatus
  reviewMessageId        BigInt
  reviewMessageChannelId BigInt
  reviewMessageDeleted   Boolean            @default(false)
  followUpChannelId      BigInt?
  guildId                BigInt
  raiseMessageId         BigInt?
  raiseThreadId          BigInt?
  approverId             BigInt?
  guild                  Guild              @relation(fields: [guildId], references: [id])
}

enum VerificationStatus {
  PENDING // Waiting review
  RAISED // Escalated to another level 
  FOLLOWUP // Waiting for followup
  APPROVED // Application approved 
  BANNED // User denied (banned)
  DENIED // Application denied 
  LAPSED // Application lapsed (user left server)
}
